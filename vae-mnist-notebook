{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[],"gpuType":"T4"},"accelerator":"GPU","kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"If working with Google Colab run the following cell (otherwise can be ignored)","metadata":{"id":"V0TbQPjd8kmE"}},{"cell_type":"code","source":"!pip install pytorch_fid","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TPKkScLG7vHZ","outputId":"8c2153af-1d26-4700-a5e4-6fe35556de64","trusted":true,"execution":{"iopub.status.busy":"2025-05-05T18:47:08.261008Z","iopub.execute_input":"2025-05-05T18:47:08.261762Z","iopub.status.idle":"2025-05-05T18:47:11.269888Z","shell.execute_reply.started":"2025-05-05T18:47:08.261731Z","shell.execute_reply":"2025-05-05T18:47:11.268946Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: pytorch_fid in /usr/local/lib/python3.11/dist-packages (0.3.0)\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from pytorch_fid) (1.26.4)\nRequirement already satisfied: pillow in /usr/local/lib/python3.11/dist-packages (from pytorch_fid) (11.1.0)\nRequirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from pytorch_fid) (1.15.2)\nRequirement already satisfied: torch>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from pytorch_fid) (2.5.1+cu124)\nRequirement already satisfied: torchvision>=0.2.2 in /usr/local/lib/python3.11/dist-packages (from pytorch_fid) (0.20.1+cu124)\nRequirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (3.18.0)\nRequirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (4.13.1)\nRequirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (3.4.2)\nRequirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (3.1.6)\nRequirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (2025.3.2)\nRequirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (12.4.127)\nRequirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (12.4.127)\nRequirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (12.4.127)\nRequirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (9.1.0.70)\nRequirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (12.4.5.8)\nRequirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (11.2.1.3)\nRequirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (10.3.5.147)\nRequirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (11.6.1.9)\nRequirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (12.3.1.170)\nRequirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (2.21.5)\nRequirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (12.4.127)\nRequirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (12.4.127)\nRequirement already satisfied: triton==3.1.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (3.1.0)\nRequirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=1.0.1->pytorch_fid) (1.13.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=1.0.1->pytorch_fid) (1.3.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->pytorch_fid) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->pytorch_fid) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->pytorch_fid) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->pytorch_fid) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->pytorch_fid) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->pytorch_fid) (2.4.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=1.0.1->pytorch_fid) (3.0.2)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->pytorch_fid) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->pytorch_fid) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->pytorch_fid) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->pytorch_fid) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->pytorch_fid) (2024.2.0)\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"import torch\nimport random\nimport numpy as np\nfrom torchvision.datasets import MNIST\nimport torchvision.transforms as transforms\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision\nfrom tqdm import tqdm\nfrom PIL import Image\nimport os\nimport shutil\nimport pytorch_fid\nimport gzip\nfrom pytorch_fid.inception import InceptionV3\nfrom pytorch_fid.fid_score import calculate_frechet_distance, compute_statistics_of_path\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nprint(device)","metadata":{"id":"81k2dKHq9ONS","colab":{"base_uri":"https://localhost:8080/"},"outputId":"932a1681-ba69-4713-ec10-f3011a2faaa1","trusted":true,"execution":{"iopub.status.busy":"2025-05-05T18:47:14.673282Z","iopub.execute_input":"2025-05-05T18:47:14.674114Z","iopub.status.idle":"2025-05-05T18:47:14.680189Z","shell.execute_reply.started":"2025-05-05T18:47:14.674081Z","shell.execute_reply":"2025-05-05T18:47:14.679320Z"}},"outputs":[{"name":"stdout","text":"cuda\n","output_type":"stream"}],"execution_count":13},{"cell_type":"markdown","source":"## Fashion MNIST Dataset\nFor more information:\nhttps://www.kaggle.com/datasets/zalando-research/fashionmnist","metadata":{"id":"DO0-A3sj8uvg"}},{"cell_type":"code","source":"mnist_train = MNIST(\"./data\", train=True, download=True,\n                    transform=torchvision.transforms.ToTensor())\nmnist_test = MNIST(\"./data\", train=False, download=True,\n                  transform=torchvision.transforms.ToTensor())\n\ntrain_loader = torch.utils.data.DataLoader(mnist_train, batch_size=32, shuffle=True)\ntest_loader = torch.utils.data.DataLoader(mnist_test, batch_size=32, shuffle=False)","metadata":{"id":"zACYmLPG9RVT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"43f166f3-710f-4aee-ee54-31c2a571fb55","trusted":true,"execution":{"iopub.status.busy":"2025-05-05T18:47:17.500197Z","iopub.execute_input":"2025-05-05T18:47:17.500848Z","iopub.status.idle":"2025-05-05T18:47:17.596138Z","shell.execute_reply.started":"2025-05-05T18:47:17.500824Z","shell.execute_reply":"2025-05-05T18:47:17.595559Z"}},"outputs":[],"execution_count":14},{"cell_type":"markdown","source":"This is the data we are working with (some examples)","metadata":{"id":"FWWC-Wuo9aZU"}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\nprint(f\"Train dataset size: {len(mnist_train)}\")\nprint(f\"Test dataset size: {len(mnist_test)}\")\nprint(f\"Image shape: {mnist_train[0][0].shape}\")  # (1, 28, 28) = 1 Channel (grey), 28x28 Pixel\nprint(f\"Label of first image: {mnist_train[0][1]}\")\n\n# Show 3 example images\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\nfor i in range(3):\n    image, label = mnist_train[i]\n    axs[i].imshow(image.squeeze(), cmap=\"gray\")\n    axs[i].set_title(f\"Label: {label}\")\n    axs[i].axis(\"off\")\n\nplt.tight_layout()\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":311},"id":"gi1aSWSw9MWy","outputId":"b1b6c1ba-bf21-41d7-ea0e-88a327a9c251","trusted":true,"execution":{"iopub.status.busy":"2025-05-05T18:47:21.071230Z","iopub.execute_input":"2025-05-05T18:47:21.071981Z","iopub.status.idle":"2025-05-05T18:47:21.262493Z","shell.execute_reply.started":"2025-05-05T18:47:21.071955Z","shell.execute_reply":"2025-05-05T18:47:21.261908Z"}},"outputs":[{"name":"stdout","text":"Train dataset size: 60000\nTest dataset size: 10000\nImage shape: torch.Size([1, 28, 28])\nLabel of first image: 5\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 3 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":15},{"cell_type":"markdown","source":"## Model architecture\n- Encoder\n- Decoder\n\nWe make use of the Reparameterization trick to enable Backpropagation (https://en.wikipedia.org/wiki/Reparameterization_trick)","metadata":{"id":"DxMsepAe-hGx"}},{"cell_type":"code","source":"class VAE(nn.Module):\n    def __init__(self, encoding_dim):\n        super(VAE, self).__init__()\n        self.encoding_dim = encoding_dim\n        # Encoder\n        self.encoder = nn.Sequential(\n            nn.Conv2d(1, 64, kernel_size=4, stride=2, padding=1),  # 1x28x28 -> 64x14x14\n            nn.ReLU(),\n            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1),  # 64x14x14 -> 128x7x7\n            nn.ReLU(),\n            nn.Flatten(),\n            nn.Linear(128 * 7 * 7, 256),\n            nn.ReLU(),\n            nn.Linear(256, encoding_dim * 2)  # mu and log_var\n        )\n        # Decoder\n        self.decoder_input = nn.Linear(encoding_dim, 128)\n        self.decoder = nn.Sequential(\n            nn.Linear(128, 64 * 7 * 7),\n            nn.ReLU(),\n            nn.Unflatten(1, (64, 7, 7)),\n            nn.ConvTranspose2d(64, 32, kernel_size=4, stride=2, padding=1),  # 64x7x7 -> 32x14x14\n            nn.ReLU(),\n            nn.ConvTranspose2d(32, 1, kernel_size=4, stride=2, padding=1),  # 32x14x14 -> 1x28x28\n            nn.Sigmoid() # Values between 0 and 1\n        )\n\n    def encode(self, x):\n        x = self.encoder(x)\n        mu, log_var = x.split(self.encoding_dim, dim=1)\n        return mu, log_var\n\n    # Reparameterization trick\n    def reparameterize(self, mu, log_var):\n        std = torch.exp(0.5 * log_var)\n        eps = torch.randn_like(std)\n        return mu + eps * std\n\n    def decode(self, z):\n        z = self.decoder_input(z)\n        return self.decoder(z)\n\n    def forward(self, x):\n        mu, log_var = self.encode(x)\n        z = self.reparameterize(mu, log_var)\n        return self.decode(z), mu, log_var","metadata":{"id":"TJ_QFXbe9VDT","trusted":true},"outputs":[],"execution_count":16},{"cell_type":"markdown","source":"## Training & Testing Functions","metadata":{"id":"S_KOTe3TDn2K"}},{"cell_type":"code","source":"def train_vae_epoch(model, dataloader, optimizer, recon_loss_fn):\n    model.train()\n    total_loss, recon_loss, kl_loss = 0, 0, 0\n\n    for features, _ in dataloader:\n        features = features.to(device)\n        optimizer.zero_grad()\n        recon, mu, log_var = model(features) # Use mu and log_var for KL divergence loss\n\n        batch_size = features.size(0)\n        \n        # Reconstruction loss\n        recon_loss_batch = recon_loss_fn(recon, features) / batch_size # Update!!!\n\n        # KL divergence loss\n        kl_loss_batch = -0.5 * torch.sum(1 + log_var - mu.pow(2) - log_var.exp()) / batch_size # Update!!!\n\n        # Combined loss\n        loss = recon_loss_batch + kl_loss_batch\n\n        loss.backward()\n        optimizer.step()\n\n        total_loss += loss.item()\n        recon_loss += recon_loss_batch.item()\n        kl_loss += kl_loss_batch.item()\n\n    return total_loss / len(dataloader.dataset), recon_loss / len(dataloader.dataset), kl_loss / len(dataloader.dataset)","metadata":{"id":"Uzx_xGOJ9YT5","trusted":true,"execution":{"iopub.status.busy":"2025-05-05T18:49:56.861213Z","iopub.execute_input":"2025-05-05T18:49:56.861512Z","iopub.status.idle":"2025-05-05T18:49:56.867047Z","shell.execute_reply.started":"2025-05-05T18:49:56.861489Z","shell.execute_reply":"2025-05-05T18:49:56.866273Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"## Testing Function using FID Score\nFor more information: https://en.wikipedia.org/wiki/Fréchet_inception_distance","metadata":{}},{"cell_type":"code","source":"import torchvision.transforms as T\n\nfid_preprocess = T.Compose([\n    T.Resize((299, 299)),\n    T.Lambda(lambda x: x.expand(3, -1, -1)),\n    T.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])\n])\n\ndef preprocess_batch_for_fid(batch):\n    return torch.stack([fid_preprocess(img) for img in batch])\n\ndef extract_inception_features(images, model, batch_size=64):\n    features = []\n    model.eval()\n    with torch.no_grad():\n        for i in range(0, len(images), batch_size):\n            batch = images[i:i+batch_size].to(device)\n            output = model(batch)[0]\n            output = output.squeeze(-1).squeeze(-1).cpu()\n            features.append(output)\n    return torch.cat(features, dim=0).numpy()\n\ndef test_vae_from_sampling(model, latent_dim, fid_model, n_images=1000):\n    model.eval()\n    with torch.no_grad():\n        z = torch.randn(n_images, latent_dim).to(device)\n        generated = model.decode(z).cpu()\n\n    real_images = torch.stack([mnist_test[i][0] for i in range(n_images)])\n\n    real_pre = preprocess_batch_for_fid(real_images)\n    gen_pre = preprocess_batch_for_fid(generated)\n\n    real_feats = extract_inception_features(real_pre, fid_model)\n    gen_feats = extract_inception_features(gen_pre, fid_model)\n\n    mu_r, sigma_r = real_feats.mean(axis=0), np.cov(real_feats, rowvar=False)\n    mu_g, sigma_g = gen_feats.mean(axis=0), np.cov(gen_feats, rowvar=False)\n\n    return calculate_frechet_distance(mu_r, sigma_r, mu_g, sigma_g)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T18:49:57.489850Z","iopub.execute_input":"2025-05-05T18:49:57.490556Z","iopub.status.idle":"2025-05-05T18:49:57.498496Z","shell.execute_reply.started":"2025-05-05T18:49:57.490534Z","shell.execute_reply":"2025-05-05T18:49:57.497733Z"}},"outputs":[],"execution_count":22},{"cell_type":"markdown","source":"## Further Testing Function","metadata":{}},{"cell_type":"code","source":"def show_reconstructions(model, dataset, n=10):\n    model.eval()\n    fig, axs = plt.subplots(2, n, figsize=(n*2.5, 5))\n\n    with torch.no_grad():\n        for i in range(n):\n            image, _ = dataset[i]\n            image_input = image.unsqueeze(0).to(device)  # (1, 1, 28, 28)\n            recon, _, _ = model(image_input)\n\n            axs[0, i].imshow(image.squeeze(0), cmap='gray')\n            axs[0, i].set_title(\"Original\")\n            axs[0, i].axis('off')\n\n            axs[1, i].imshow(recon.squeeze().cpu(), cmap='gray')\n            axs[1, i].set_title(\"Reconstructed\")\n            axs[1, i].axis('off')\n\n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T18:49:58.456379Z","iopub.execute_input":"2025-05-05T18:49:58.456665Z","iopub.status.idle":"2025-05-05T18:49:58.462392Z","shell.execute_reply.started":"2025-05-05T18:49:58.456643Z","shell.execute_reply":"2025-05-05T18:49:58.461646Z"}},"outputs":[],"execution_count":23},{"cell_type":"markdown","source":"## Parameter & Configurations","metadata":{"id":"ifo3570gDV-p"}},{"cell_type":"code","source":"latent_dim = 16\nmodel = VAE(encoding_dim=latent_dim).to(device)\n\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\nrecon_loss_fn = nn.MSELoss(reduction='sum')\nepochs = 20","metadata":{"id":"-tp0uZtB9d9G","trusted":true,"execution":{"iopub.status.busy":"2025-05-05T18:50:01.128088Z","iopub.execute_input":"2025-05-05T18:50:01.128331Z","iopub.status.idle":"2025-05-05T18:50:01.156003Z","shell.execute_reply.started":"2025-05-05T18:50:01.128314Z","shell.execute_reply":"2025-05-05T18:50:01.155510Z"}},"outputs":[],"execution_count":24},{"cell_type":"markdown","source":"## Training","metadata":{}},{"cell_type":"code","source":"for epoch in range(epochs):\n  total_loss, recon_loss, kl_loss = train_vae_epoch(model, train_loader, optimizer, recon_loss_fn)\n  print(f\"Epoch {epoch + 1}/{epochs}, Total Loss: {total_loss:.4f}, Recon Loss: {recon_loss:.4f}, KL Loss: {kl_loss:.4f}\")","metadata":{"id":"oMwWoUPl9jHk","colab":{"base_uri":"https://localhost:8080/","height":241},"outputId":"da3571ee-6714-4ebd-ebe1-f351d5f68a8a","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Testing (FID Score)","metadata":{}},{"cell_type":"code","source":"fid_model = InceptionV3([InceptionV3.BLOCK_INDEX_BY_DIM[2048]]).to(device)\nfid_model.eval()\n\nfid_sample = test_vae_from_sampling(model, latent_dim, fid_model)\nprint(f\"FID Score (from sampled images): {fid_sample:.4f}\")","metadata":{"id":"Etw0rHSCCe2n","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"show_reconstructions(model, mnist_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T19:07:22.402385Z","iopub.execute_input":"2025-05-05T19:07:22.402709Z","iopub.status.idle":"2025-05-05T19:07:23.418274Z","shell.execute_reply.started":"2025-05-05T19:07:22.402689Z","shell.execute_reply":"2025-05-05T19:07:23.417608Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 2500x500 with 20 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":26}]}